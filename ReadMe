一：图片加载框架主要流程
1、三级缓存（内存缓存--->本地缓存--->磁盘缓存）
当我们的APP中想要加载某张图片的过程
先去LruCache中寻找图片，如果LruCache中有，则直接取出来使用，
如果LruCache中没有，则去文件系统中寻找，如果有则取出来使用，同时将图片添加到LruCache中，
如果没有，则连接网络从网上下载图片。图片下载完成后，将图片通过DiskLruCache缓存到本地，然后放到LruCache中。

从网络下载图片--保存到磁盘中--展示出来

问题：
1）网络下载完成之后，通过什么方式去通知磁盘缓存、内存缓存？？
https://www.jianshu.com/p/f9cfbea586c2

2) 如何和Activity的生命周期绑定在一起？？（如何和图片加载结合起来）
通过Activity 的FragmentManager,绑定一个空的RequestManagerFragment(内部初始化LifecycleListener),同步Activity 的生命周期。

3）图片放缩、加载长图
https://blog.csdn.net/lijinweii/article/details/77717540
https://blog.csdn.net/jingzz1/article/details/84663067
MotionEvent详解：https://blog.csdn.net/vicwudi/article/details/82084965
Matrix讲解：https://blog.csdn.net/cquwentao/article/details/51445269
技术点：Matrix，Scroller，

4）加载长图：BitmapRegionDecoder

二：使用Kotlin 作为开发语言 熟练掌握基本用法
1、Java和Kotlin混用：https://www.jianshu.com/p/9220227cdfb3
2、kotlin 中替代findViewById： https://www.jianshu.com/p/1121c191f4c6
https://www.jianshu.com/p/e60aa23ab63f
3、kotlin 中点击事件 https://www.jianshu.com/p/d057ac23eed0
4、JsonToKotlin插件 将Json 格式化

5、Kotlin重构如何兼容原先的ButterKnife、EventBus3.1： https://www.jianshu.com/p/033cca6b615d

6、kotlin的NULL 检查机制
有两种处理方式，字段后加!!像Java一样抛出空异常，另一种字段后加?可不做处理返回值为 null或配合?:做空判断处理；

7、作用域函数：let、run、with、apply 以及 also。在一个对象上执行一个代码块；
每个作用域函数之间有两个主要区别：引用上下文对象的方式、返回值

8、协程是轻量级的线程

9、单例模式 https://www.jianshu.com/p/5797b3d0ebd0

10、委托

11、静态方法的实现 https://www.jianshu.com/p/9e1e1a55da73
在kotlin中调用的静态方法的方式有两种静态类或者静态方法
companion object{}  放静态变量和静态方法
object 替换class 表示静态类

三：单元测试

四、APP 抓包
https://www.jianshu.com/p/8034b451585b

五、简单实现GreenDao--根据GreenDao的设计思路简单事件对象型数据库
GreenDao是一个对象关系映射（ORM）的开源框架，是一种将对象层次结构映射成关系型结构的方法。

1、注解的使用：https://www.jianshu.com/p/de13b00042d6
2、泛型、工厂设计模式


四：加密算法：
1、对称加密（AES、DES）、非对称加密（RSA）、不可逆加密（MD5、SHA1）：https://www.cnblogs.com/tuyile006/p/10873975.html
2、android  保存本地密钥实践：https://www.jianshu.com/p/a24353ce977a
在登录模块中需要对验证码、密码进行加密处理，非对称加密（公钥、私钥），防止明文数据传输，数据泄漏。
客户端公钥如何保存？使用so库文件，通过jni方式进行验证，通过签名信息校验调用者是否正确。
3、Https的数字证书验证原理：https://blog.csdn.net/liuxingrong666/article/details/83869161


五：面试题
https://www.jianshu.com/p/cfac5c131a9b
synchronized作用范围和对象：https://blog.csdn.net/qa275267067/article/details/79804713
ANR原理分析和解决办法：https://www.jianshu.com/p/388166988cef

- 文件颜色渐变的原理

六、组件化、插件化
组件化--组件自动注册方案：
1、一种更高效的组件自动注册方案(android组件化开发)：https://blog.csdn.net/cdecde111/article/details/78074692

2、Android彻底组件化demo发布--生命周期：https://www.jianshu.com/p/59822a7b2fad   特别重要
解释了字节码插入方式和反射调用方式，在什么时机加载组件，以及如何加载组件

在什么时机加载组件以及如何加载组件？目前com.dd.comgradle提供了两种方式，字节码插入和反射调用。

- 字节码插入模式是在dex生成之前，扫描所有的ApplicationLike类（其有一个共同的父类），然后通过javassist在主项目的Application.onCreate()
中插入调用ApplicationLike.onCreate()的代码。这样就相当于每个组件在application启动的时候就加载起来了。

- 反射调用的方式是手动在Application.onCreate()中或者在其他合适的时机手动通过反射的方式来调用ApplicationLike.onCreate()。
之所以提供这种方式原因有两个：对代码进行扫描和插入会增加编译的时间，特别在debug的时候会影响效率，并且这种模式对Instant Run支持不好；
另一个原因是可以更灵活的控制加载或者卸载时机。
这两种模式的配置是通过配置com.dd.comgradle的Extension来实现的，
下面是字节码插入的模式下的配置格式，添加applicationName的目的是加快定位Application的速度。

todo 反射的方式在合适加载、卸载module? 可以考虑在调用组件的时候加载，但是何时卸载呢  只能通过Application类的onTerminate()方法卸载。

3、组件生命周期管理：https://www.jianshu.com/p/65433846d38a
组件生命周期如何实现自动注册：https://www.jianshu.com/p/59368ce8b670
自定义gradle 插件： https://www.jianshu.com/p/3ec8e9574aaf

七、视频播放器
1、关于Android视频播放：https://www.jianshu.com/p/2ea9572cf36c
客户端在播放前，无需下载整个媒体文件，而是在播放缓存区已下载的媒体数据同时，持续不断接收媒体流的剩下部分。
使用的就是HTTP渐进下载流媒体播放（HTTP progressive streaming），边下边播：


2、流媒体技术


3、视频缓存实现原理：https://www.jianshu.com/p/f057a03ded0b
一种边播边下的播放策略：https://juejin.im/entry/59b09fcff265da24754db224
如何实现视频分片段存储？？ AndroidVideoCache实现原理 todo
videoCache原理：https://www.jianshu.com/p/4745de02dcdc

4、seek 精确跳转  todo


dex、加固

Android应用加固原理：https://www.jianshu.com/p/4ff48b761ff6
浅谈 Android Dex 文件：https://segmentfault.com/a/1190000017059132?utm_source=tag-newest
